function cookieMold(e, o, t) {
    var n = new Date();
    n.setTime(n.getTime() + 24 * t * 60 * 60 * 1e3);
    var a = "expires=" + n.toUTCString();
    document.cookie = e + "=" + o + ";" + a + ";path=/";
}

function eatCookie(e) {
    for (var o = e + "=", t = decodeURIComponent(document.cookie).split(";"), n = 0; n < t.length; n++) {
        for (var a = t[n]; " " == a.charAt(0); ) a = a.substring(1);
        if (0 === a.indexOf(o)) return a.substring(o.length, a.length);
    }
    return "";
}

function agreePage(e) {
    document.cookie = "agreement=" + e, window.location.replace("index.html");
}

function visitCheck() {
    "" === eatCookie("visits") || null === eatCookie("visits") ? cookieMold("visits", 1, 1) : (cookieMold("visits", parseInt(eatCookie("visits")) + 1, 1), 
    "show" === eatCookie("legend") && (document.getElementById("legendSwitch").checked = !0));
}

function cookieLegend() {
    var e = eatCookie("legend").toUpperCase();
    if (null !== eatCookie("legend")) switch (e) {
      case "HIDE":
        cookieMold("legend", "show", 9999), console.log("Now Showing");
        break;

      case "SHOW":
        cookieMold("legend", "hide", 9999), console.log("Now Hiding");
        break;

      default:
        console.log("Done changing");
    }
}

function firstLegend() {
    "" !== eatCookie("visits") && null !== eatCookie("visits") || cookieMold("legend", "hide", 9999);
}

function openMenu() {
    var e = document.getElementsByClassName("nav")[0], o = document.getElementsByClassName("content-disable")[0];
    "nav" === e.className && (e.classList.add("nav-active"), o.classList.add("active"));
}

function closeMenu() {
    console.log("closeMenu ran");
    var e = document.getElementsByClassName("nav")[0], o = document.getElementsByClassName("content-disable")[0];
    "nav nav-active" === e.className && (e.classList.remove("nav-active"), o.classList.remove("active"));
    var t = document.getElementsByClassName("floors")[0];
    "floors floors-active" === t.className && t.classList.remove("floors-active");
}

function subMenu(e) {
    var o = document.getElementsByClassName(e)[0];
    o.className === e ? o.classList.add("subMenu-active") : o.className === e + " subMenu-active" && o.classList.remove("subMenu-active");
}

var roomNames, urlTimer, campus = "Building/(Campus)/campus.html", building2 = [ "Building/2000/First-Floor.html" ], building3 = [ "Building/3000/First-Floor.html", "Building/3000/Second-Floor.html", "Building/3000/Third-Floor.html", "Building/3000/Fourth-Floor.html" ], buildingA = [ "Building/A/First-Floor.html" ], buildingB = [ "Building/B/first-floor.html", "Building/B/second-floor.html", "Building/B/third-floor.html" ], buildingC = [ "Building/C/First-Floor.html", "Building/C/Second-Floor.html" ], buildingC3 = [ "Building/C3/Ground-Floor.html", "Building/C3/First-Floor.html", "Building/C3/Second-Floor.html" ], buildingD = [ "Building/D/First-Floor.html", "Building/D/Second-Floor.html" ], buildingE = [ "Building/E/First-Floor.html", "Building/E/Second-Floor.html", "Building/E/Third-Floor.html" ], buildingF = [ "Building/F/First-Floor.html", "Building/F/Second-Floor.html" ], buildingH = [ "Building/H/First-Floor.html", "Building/H/Second-Floor.html", "Building/H/Third-Floor.html" ], buildingI = [ "Building/I/First-Floor.html", "Building/I/Second-Floor.html", "Building/I/Third-Floor.html" ], buildingL = [ "Building/L/First-Floor.html", "Building/L/Second-Floor.html", "Building/L/Third-Floor.html" ], floors2 = [ "1" ], floors3 = [ "1", "2", "3", "4" ], floorsA = [ "1" ], floorsB = [ "1", "2", "3" ], floorsC = [ "1", "2" ], floorsC3 = [ "G", "1", "2" ], floorsD = [ "1", "2" ], floorsE = [ "1", "2", "3" ], floorsF = [ "1", "2" ], floorsH = [ "1", "2", "3" ], floorsI = [ "1", "2", "3" ], floorsL = [ "1", "2", "3" ], roomNameFile = "js/roomNames.json", helpFile = "help.html", devFile = "devs.html", HIDE = !0, SHOW = !1;

function urlRoom() {
    if (console.log("urlRoom started"), -1 < window.navigator.userAgent.indexOf("Edge")) ; else {
        var e = window.location.hash, o = e.substring(e.lastIndexOf("#") + 1);
        if ("" === o || o.includes(".") || "campus" === o.toLowerCase()) addMap(campus, "Campus").then(function(e) {
            window.location.hash = "Campus", document.getElementById("search").value = "";
        }, function(e) {
            console.error("Failed!", e);
        }); else switch (o.toUpperCase()) {
          case "2":
            changeFloor("2");
            break;

          case "3":
            changeFloor("3", "1");
            break;

          case "A":
            changeFloor("A");
            break;

          case "B":
            changeFloor("B", "1");
            break;

          case "C":
            changeFloor("C", "1");
            break;

          case "C3":
            changeFloor("C3", "G");
            break;

          case "D":
            changeFloor("D", "1");
            break;

          case "E":
            changeFloor("E", "1");
            break;

          case "F":
            changeFloor("F", "1");
            break;

          case "H":
            changeFloor("H", "1");
            break;

          case "I":
            changeFloor("I", "1");
            break;

          case "L":
            changeFloor("L", "1");
            break;

          case "G":
          case "J":
          case "K":
          case "M":
          case "N":
          case "O":
          case "P":
          case "Q":
          case "R":
          case "S":
          case "T":
          case "U":
          case "V":
          case "W":
          case "X":
          case "Y":
          case "Z":
            window.location.hash = "Campus";
            break;

          default:
            console.log("urlRoom calls searchFromMenu"), searchFromMenu(o);
        }
    }
}

function loadRooms() {
    return console.log("loadRooms started"), new Promise(function(e, o) {
        var t = new XMLHttpRequest();
        t.open("GET", roomNameFile, !0), t.onload = function() {
            200 !== t.status && o(Error(t.statusText)), roomNames = JSON.parse(t.response), 
            e(t.response);
        }, t.onerror = function() {
            o(Error("Network Error"));
        }, t.send();
    });
}

function addMap(e, s, c) {
    console.log("addMap started");
    var d = document.getElementById("building"), u = document.getElementById("floor"), m = document.getElementById("svg-holder");
    return new Promise(function(r, l) {
        var i = new XMLHttpRequest();
        i.open("GET", e, !0), i.onload = function() {
            if (200 !== i.status && l(Error(i.statusText)), s !== d) {
                var e = document.getElementById("building-popup"), o = document.getElementsByClassName("dropdown")[0], t = document.getElementsByClassName("campus-info")[0];
                "Campus" === s ? (hideElement(e, HIDE), "show" === eatCookie("legend") ? (hideElement(t, SHOW), 
                document.getElementById("pLegend").style.display = "inherit") : (hideElement(t, HIDE), 
                document.getElementById("pLegend").style.display = "none")) : (hideElement(e, SHOW), 
                hideElement(t, HIDE)), void 0 !== c ? (hideElement(u, SHOW), hideElement(o, SHOW), 
                floorDropDown(s), u.innerHTML = "FL" + c) : (hideElement(u, HIDE), hideElement(o, HIDE));
            }
            removeMap(), m.appendChild(convertToElement(i.response));
            var n = m.childNodes[0];
            n.style.height = getClientHeight(), d.innerHTML = s;
            var a = svgPanZoom(n, {
                controlIconsEnabled: !0,
                fit: 1,
                center: 1,
                customEventsHandler: {
                    haltEventListeners: [ "touchStart", "touchend", "touchmove", "touchleave", "touchcancel" ],
                    init: function(e) {
                        var o = e.instance, t = 1, n = 0, a = 0;
                        this.hammer = Hammer(e.svgElement, {
                            inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput
                        }), this.hammer.get("pinch").set({
                            enable: !0
                        }), this.hammer.on("doubletap", function(e) {
                            o.zoomIn();
                        }), this.hammer.on("panstart panmove", function(e) {
                            "panstart" === e.type && (a = n = 0), o.panBy({
                                x: e.deltaX - n,
                                y: e.deltaY - a
                            }), n = e.deltaX, a = e.deltaY;
                        }), this.hammer.on("pinchstart pinchmove", function(e) {
                            "pinchstart" === e.type && (t = o.getZoom(), o.zoom(t * e.scale)), o.zoom(t * e.scale);
                        }), this.hammer.on("tap", function(e) {
                            if (toggleTab(e, "helpbox"), toggleTab(e, "devbox"), "Campus" === s) {
                                var o = e.target.parentNode.id.toUpperCase();
                                if ("A" === o) changeFloor(o); else if ("C3" === o) changeFloor(o, "G"); else for (var t in roomNames) o === t && changeFloor(t, "1");
                            } else {
                                var n = e.target.parentNode.id;
                                4 !== n.length && 5 !== n.length || (console.log("addMap calls activateRoom"), activateRoom(e.target.parentNode.id));
                            }
                        }), e.svgElement.addEventListener("touchmove", function(e) {
                            e.preventDefault();
                        });
                    },
                    destroy: function() {
                        this.hammer.destroy();
                    }
                }
            });
            window.addEventListener("resize", function() {
                n.style.height = getClientHeight(), a.resize(), a.fit(), a.center();
            }), r(i.response);
        }, i.onerror = function() {
            l(Error("Network Error"));
        }, i.send();
    });
}

function removeMap() {
    console.log("removeMap started");
    for (var e = document.getElementById("svg-holder"); e.hasChildNodes(); ) e.removeChild(e.lastChild);
}

function floorDropDown(e) {
    console.log("floorDropDown started");
    for (var o = document.getElementsByClassName("floors")[0]; o.hasChildNodes(); ) o.removeChild(o.lastChild);
    var t = [];
    switch (e) {
      case "2":
        t = floors2;
        break;

      case "3":
        t = floors3;
        break;

      case "A":
        t = floorsA;
        break;

      case "B":
        t = floorsB;
        break;

      case "C":
        t = floorsC;
        break;

      case "C3":
        t = floorsC3;
        break;

      case "D":
        t = floorsD;
        break;

      case "E":
        t = floorsE;
        break;

      case "F":
        t = floorsF;
        break;

      case "H":
        t = floorsH;
        break;

      case "I":
        t = floorsI;
        break;

      case "L":
        t = floorsL;
    }
    for (var n = 0; n < t.length; n++) {
        var a = "<h2 onclick=\"changeFloor('" + e + "', '" + t[n] + "')\">Floor " + t[n] + "</h2>";
        o.appendChild(convertToElement(a));
    }
}

function activateRoom(e, o) {
    if (console.log(" activateRoom started"), "4983" !== e) {
        var t = "room-group", n = document.getElementById(e.toLowerCase());
        if (null === n) alert("Sorry, room number " + e + " couldn't be found in this building."); else {
            var a = n.className.baseVal;
            if (a !== t && !o) return a === t + " active-room" ? void deactivateAllRooms() : void 0;
            a === t && (deactivateAllRooms(), n.classList.add("active-room"));
        }
    }
}

function deactivateAllRooms() {
    console.log("deactivateAllRooms started");
    for (var e = document.getElementsByClassName("room-group"), o = 0; o < e.length; o++) e[o].classList.remove("active-room");
}

function searchFromBar(e) {
    console.log("searchFromBar started"), 13 != e.which && 13 != e.keyCode || (console.log("searchFromBar calls searchRoomNumber"), 
    searchRoomNumber());
}

function searchFromMenu(e) {
    console.log("searchFromMenu started"), closeMenu(), console.log("searchFromMenu calls parseSearch");
    var o = parseSearch(e);
    "" !== o.roomName ? document.getElementById("roomSearch").value = o.roomName : document.getElementById("roomSearch").value = o.building + " " + o.room, 
    console.log("searchFromMenu calls searchRoomNumber"), searchRoomNumber();
}

function searchRoomNumber() {
    console.log("searchRoomNumber started"), console.log("searchRoomNumber calls parseSearch");
    var e = parseSearch(document.getElementById("roomSearch").value.toUpperCase());
    if (console.log("building = " + e.building), "campus" === e.roomName.toLowerCase()) document.getElementById("roomSearch").value = "", 
    changeFloor("Campus"); else {
        var o = "4983", t = document.getElementById("building").innerHTML, n = t, a = document.getElementById("floor").innerHTML, r = "", l = "";
        if ("" !== e.building && (t = e.building), "" !== e.room && (o = e.room), "" !== e.roomName) {
            for (var i in o = "", roomNames) {
                var s = i;
                for (var c in roomNames[i]) {
                    var d = c;
                    for (var u in roomNames[i][c]) {
                        var m = roomNames[i][c][u];
                        m.name.toLowerCase() === e.roomName.toLowerCase() && (r = s, l = d, o = m.id);
                    }
                }
            }
            "" === o ? alert('Were you trying to search by nickname? Unfortunately, "' + e.roomName + '" is not recognized.\nPlease check your spelling, or try a more common name.\n\nExample: Search for "Moes" not "Mo"') : window.location.hash = e.roomName;
        } else {
            switch (console.log("upperHash started"), window.location.hash = "4983" !== o ? t.toUpperCase() + o.toUpperCase() : t.toUpperCase(), 
            console.log("urlRoom stopped by upperHash()"), clearTimeout(urlTimer), t[0].toUpperCase()) {
              case "2":
                r = "2", l = void 0;
                break;

              case "3":
                "4" === o[1] ? (r = "3", l = "4") : "3" === o[1] ? l = r = "3" : "2" === o[1] ? (r = "3", 
                l = "2") : (r = "3", l = "1");
                break;

              case "A":
                r = "A", l = void 0;
                break;

              case "B":
                "3" === o[0] ? (r = "B", l = "3") : "2" === o[0] ? (r = "B", l = "2") : (o[0], r = "B", 
                l = "1");
                break;

              case "C":
                "3" === o[1] ? "2" === o[0] ? (r = "C3", l = "2") : "1" === o[0] ? (r = "C3", l = "1") : (r = "C3", 
                l = "G") : "2" === o[0] ? (r = "C", l = "2") : (r = "C", l = "1");
                break;

              case "D":
                "2" === o[0] ? (r = "D", l = "2") : (o[0], r = "D", l = "1");
                break;

              case "E":
                "3" === o[0] ? (r = "E", l = "3") : "2" === o[0] ? (r = "E", l = "2") : (o[0], r = "E", 
                l = "1");
                break;

              case "F":
                "2" === o[0] ? (r = "F", l = "2") : (o[0], r = "F", l = "1");
                break;

              case "H":
                "3" === o[0] ? (r = "H", l = "3") : "2" === o[0] ? (r = "H", l = "2") : (o[0], r = "H", 
                l = "1");
                break;

              case "I":
                "3" === o[0] ? (r = "I", l = "3") : "2" === o[0] ? (r = "I", l = "2") : (o[0], r = "I", 
                l = "1");
                break;

              case "L":
                "3" === o[0] ? (r = "L", l = "3") : "2" === o[0] ? (r = "L", l = "2") : (o[0], r = "L", 
                l = "1");
                break;

              case "G":
              case "J":
              case "K":
              case "M":
              case "N":
              case "O":
              case "P":
              case "Q":
              case "R":
              case "S":
              case "T":
              case "U":
              case "V":
              case "W":
              case "X":
              case "Y":
              case "Z":
                if ("0" === o[0] || "1" === o[0] || "2" === o[0] || "3" === o[0] || "4" === o[0] || "5" === o[0] || "6" === o[0] || "7" === o[0] || "8" === o[0] || "9" === o[0]) {
                    alert("Did you mean to search for building " + t + "?\nThat building doesn't exist.");
                    break;
                }
                alert(t + " is an invalid building."), changeFloor("Campus");
                break;

              default:
                alert("I'm sorry, " + t + " is a character we don't understand.");
            }
        }
        n !== r || a !== l ? (console.log("searchRoomNumber calls searchNewFloor"), searchNewFloor(r, l, o)) : (console.log("searchRoomNumber calls activateRoom"), 
        activateRoom(o, !0));
    }
}

function getMap(e, o) {
    console.log("getMap started");
    var t = "";
    switch (e) {
      case "Campus":
        t = campus;
        break;

      case "2":
        t = building2[0];
        break;

      case "3":
        t = "4" === o ? building3[3] : "3" === o ? building3[2] : "2" === o ? building3[1] : building3[0];
        break;

      case "A":
        t = buildingA[0];
        break;

      case "B":
        t = "3" === o ? buildingB[2] : "2" === o ? buildingB[1] : buildingB[0];
        break;

      case "C":
        t = "1" === o ? buildingC[0] : buildingC[1];
        break;

      case "C3":
        t = "2" === o ? buildingC3[2] : "1" === o ? buildingC3[1] : buildingC3[0];
        break;

      case "D":
        t = "2" === o ? buildingD[1] : buildingD[0];
        break;

      case "E":
        t = "3" === o ? buildingE[2] : "2" === o ? buildingE[1] : buildingE[0];
        break;

      case "F":
        t = "2" === o ? buildingF[1] : buildingF[0];
        break;

      case "H":
        t = "3" === o ? buildingH[2] : "2" === o ? buildingH[1] : buildingH[0];
        break;

      case "I":
        t = "3" === o ? buildingI[2] : "2" === o ? buildingI[1] : buildingI[0];
        break;

      case "L":
        t = "3" === o ? buildingL[2] : "2" === o ? buildingL[1] : buildingL[0];
    }
    return console.log("getMap returning"), t;
}

function changeFloor(o, e) {
    console.log("changeFloor started"), closeMenu();
    var t = o.toUpperCase();
    (document.getElementById("roomSearch").value = "") !== (t = getMap(o, e)) && addMap(t, o, e).then(function(e) {
        window.location.hash = o, console.log("urlRoom stopped by changeFloor"), clearTimeout(urlTimer);
    }, function(e) {
        console.error("Failed!", e);
    });
}

function searchNewFloor(e, o, t) {
    console.log("searchNewFloor started");
    var n = e, a = document.getElementById("building"), r = document.getElementById("floor");
    a.innerHTML === e && r.innerHTML === o || (console.log("searchNewFloor calls getMap"), 
    "" !== (n = getMap(e.toUpperCase(), o)) && (console.log("searchNewFloor calls addMap"), 
    addMap(n, e, o).then(function(e) {
        console.log("searchNewFloor calls activateRoom"), activateRoom(t, !0);
    }, function(e) {
        console.error("Failed!", e);
    })));
}

function openTab(e) {
    closeMenu();
    var o = document.getElementById(e);
    if (!o.classList.contains("tab-active")) {
        o.classList.toggle("tab-active");
        var t = tabContentHeight(e);
        o.childNodes[0].childNodes[7].style.height = t + "px";
    }
}

function closeTab(e) {
    var o = document.getElementById(e);
    o.classList.contains("tab-active") && o.classList.toggle("tab-active");
}

function tabContentHeight(e) {
    return (window.innerHeight || document.body.clientHeight) - document.getElementById(e).childNodes[0].childNodes[1].clientHeight;
}

function isLetter(e) {
    return e.toLowerCase() !== e.toUpperCase();
}

function isNumeric(e) {
    return !isNaN(parseFloat(e)) && isFinite(e);
}

function parseSearch(e) {
    console.log("parseSearch started");
    for (var o = e.split(/[ \+-\s<>'"();/\\]+/), t = "", n = "", a = "", r = 0; r < o.length; r++) 1 === o[r].length && isLetter(o[r]) && 0 === r ? t = o[r] : 4 === o[r].length ? isNumeric(o[r]) ? "2000" == o[r] || "3000" == o[r] ? t = o[r][0] : n = o[r] : "G" === o[r].charAt(0) && isNumeric(o[r].substring(1)) ? (n = o[r], 
    t = "C") : ("" !== a && (a += "-"), a += o[r]) : 5 === o[r].length ? isNumeric(o[r].substring(1)) ? (n = o[r].substring(1), 
    t = o[r].charAt(0)) : isNumeric(o[r].substring(0, 4)) ? n = o[r] : ("" !== a && (a += "-"), 
    a += o[r]) : 6 === o[r].length && isNumeric(o[r].substring(1, 5)) ? (n = o[r].substring(1), 
    t = o[r].charAt(0)) : ("" !== a && (a += "-"), a += o[r]);
    return "" === t && "" === n && "" !== a && isLetter(e[0]) && isNumeric(e[2]) && (t = e[0], 
    n = e.substring(1), a = ""), {
        building: t,
        room: n,
        roomName: a.toLowerCase()
    };
}

function activatePopup(e, o) {
    e.onmouseover = function() {
        document.getElementById(o).classList.toggle("popup-active");
    }, e.onmouseout = function() {
        document.getElementById(o).classList.toggle("popup-active");
    };
}

function convertToElement(e) {
    var o = document.createElement("div");
    return o.innerHTML = e, o.childNodes[0];
}

function getClientHeight() {
    return (window.innerHeight || document.body.clientHeight) + "px";
}

function dropdown(e, o) {
    document.getElementsByClassName(e)[0].classList.toggle(o);
}

function resetWidth(e) {
    e.resize(), e.fit(), e.center();
}

function hideElement(e, o) {
    o ? e.classList.contains("hide") || e.classList.toggle("hide") : e.classList.contains("hide") && e.classList.toggle("hide");
}

function loadFile(n, a) {
    return new Promise(function(e, o) {
        var t = new XMLHttpRequest();
        t.open("GET", a, !0), t.onload = function() {
            200 !== t.status && o(Error(t.statusText)), document.getElementById(n).appendChild(convertToElement(t.response)), 
            e(t.response);
        }, t.onerror = function() {
            o(Error("Network Error"));
        }, t.send();
    });
}

function toggleTab(e, o) {
    var t = document.getElementById(o);
    !isDescendant(t, e.target) && t.classList.contains("tab-active") && t.classList.toggle("tab-active");
}

function isDescendant(e, o) {
    for (var t = o.parentNode; null !== t; ) {
        if (t === e) return !0;
        t = t.parentNode;
    }
    return !1;
}

document.addEventListener("DOMContentLoaded", function() {
    loadRooms().then(function(e) {}, function(e) {
        console.error("Failed!", e);
    }), loadFile("helpbox", helpFile).then(function(e) {}, function(e) {
        console.error("Failed!", e);
    }), loadFile("devbox", devFile).then(function(e) {}, function(e) {
        console.error("Failed!", e);
    });
    var e = document.getElementById("building"), o = document.getElementById("floor"), t = document.getElementById("menu"), n = document.getElementById("search");
    activatePopup(e, "building-popup"), activatePopup(o, "floor-popup"), activatePopup(t, "menu-popup"), 
    activatePopup(n, "search-popup"), urlRoom(), window.addEventListener("popstate", function(e) {
        console.log("website auto calls urlRoom"), urlTimer = setTimeout(function() {
            urlRoom();
        }, 100);
    });
});